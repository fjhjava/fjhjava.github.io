<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Java常用知识点总结-类加载机制]]></title>
      <url>http://yoursite.com/2016/11/10/20.html</url>
      <content type="html"><![CDATA[<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之原型模式]]></title>
      <url>http://yoursite.com/2016/10/05/19.html</url>
      <content type="html"><![CDATA[<p>原型模式的意图是通过复制一个现有的对象来生成新的对象，而不是通过实例化的方式。</p>
<a id="more"></a>
<p>Java中利用克隆进行原型化:<br>    1、复制的机制：复制操作会提供原始对象属性的副本，还是副本与原始对象共享这些属性的值？</p>
<p>示例代码：<br>public class Panel {</p>
<pre><code>//属性
private String color;

private String backgroundColor;

public String getColor() {
    return color;
}

public void setColor(String color) {
    this.color = color;
}

public String getBackgroundColor() {
    return backgroundColor;
}

public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
}
</code></pre><p>}</p>
<p>//原型模式：不需要调用构造函数<br>public class OzPanel extends Panel implements Cloneable{</p>
<pre><code>//不完善，默认复制了原始对象的所有属性，哪怕用不到某些属性
public OzPanel copy1() throws CloneNotSupportedException{
    return (OzPanel) this.clone();
}

//定制需要管理的属性
public OzPanel copy2(){
    OzPanel result=new OzPanel();
    result.setColor(this.getColor());
    return result;
}
</code></pre><p>}</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构详解之图]]></title>
      <url>http://yoursite.com/2016/10/05/18.html</url>
      <content type="html"><![CDATA[<p>一、图的分类</p>
<p>连通图：<br>    存在至少一条路径可以连接起所有的顶点。</p>
<p>非连通图：反之</p>
<p>有向图：</p>
<p>带权图：</p>
<a id="more"></a>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Huffman编码问题]]></title>
      <url>http://yoursite.com/2016/10/04/17.html</url>
      <content type="html"><![CDATA[<p>哈夫曼编码问题：<br>    是一种数据压缩技术。通常可以省略20%~90%的空间。</p>
<p>前缀码：<br>    无论是定长编码还是变长编码，都具有一个共同的特性，即没有一个编码字<br>变成另一个编码字的前缀。<br><a id="more"></a><br>示例：<br>               a    b    c   d     e     f</p>
<p>频率（千字）  45    13    12    16     9      5  </p>
<p>定长编码     000    001   010   011   100   101    </p>
<p>变长编码      0     101   100   111   1101  1100</p>
<p>abc编码：0.101.100,’.’表示连接<br>串’001011101’分解成：0.0.101.1101 ,表示aabe</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[23种设计模式之工厂方法]]></title>
      <url>http://yoursite.com/2016/10/04/16.html</url>
      <content type="html"><![CDATA[<p>工厂方法模式：<br>    定义一个用于创建对象的接口，使类的实例延迟它的子类。</p>
<p>适用：<br>    1、一个类不知道他所创建的类时。<br>    2、希望类的子类来决定如何实现类的实例的时候。<br>    3、将创建对象的责任委托给多个帮助类中的某一个，并将帮助子类信息局部化的时候。<br><a id="more"></a><br>实例代码：Java<br>    public interface Work {</p>
<pre><code>void doWork(String work);
</code></pre><p>}</p>
<p>public class StudentWork implements Work{</p>
<pre><code>@Override
public void doWork(String work) {
    System.out.println(&quot;学生&quot;+work);
}
</code></pre><p>}</p>
<p>public interface WorkFactory {</p>
<pre><code>Work getWork();
</code></pre><p>}</p>
<p>public class StudentWorkFactory implements WorkFactory{</p>
<pre><code>@Override
public Work getWork() {
    return new StudentWork();
}
</code></pre><p>}</p>
<p>测试结果：<br>public class Test {</p>
<pre><code>public static void main(String[] args) {
    WorkFactory factory = new StudentWorkFactory();
    factory.getWork().doWork(&quot;写作业&quot;);
}
</code></pre><p>}</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[23种设计模式之概述]]></title>
      <url>http://yoursite.com/2016/10/04/15.html</url>
      <content type="html"><![CDATA[<p>Java23种设计模式分类：<br>一、创建型模式<br>    工厂模式、抽象工厂、建造者模式、单例模式、<br>    原型模式</p>
<a id="more"></a>
<p>二、结构型模式<br>    适配器模式、桥接模式、组合模式、装饰模式、<br>    外观模式、享元模式、代理模式</p>
<p>三、行为型模式<br>    责任链模式、命令模式、解释器模式、迭代器模式、<br>    中介者模式、备忘录模式、观察者模式、状态模式、<br>    策略模式、模版方法、访问者模式</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[struts2详解之结果]]></title>
      <url>http://yoursite.com/2016/09/08/14.html</url>
      <content type="html"><![CDATA[<p>构建struts2 Ajax应用组件</p>
<p>1、JSONResult编码<br>必须实现Result接口</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[struts2详解之标签]]></title>
      <url>http://yoursite.com/2016/09/08/13.html</url>
      <content type="html"><![CDATA[<p>OGNL与ActionContext<br><a id="more"></a><br>ActionContext包含了框架的请求处理过程中可以访问的所有数据，包含从应用程序数据到会话作用域或者应用程序作用域的映射。<br>所有特定的应用程序的数据，都存储在ValueStack上，他是ActionContext中的一个对象。</p>
<p>ActionContext包含的对象<br>——————————————————————————————————————<br>ValueStack  paramters  application</p>
<p>session     attr       request</p>
<hr>
<p>OGNL如何选择根元素呢？</p>
<p>#session[‘user’]<br>通过#操作符主动命名Actioncontext中的会话映射</p>
<p>ValueStack是一个虚拟的对象。<br>里面包含了很多的属性，如果属性名重合，那么就会被栈的上层同名属性所覆盖。</p>
<p>标签语法API</p>
<p>1、Jsp语法：<br>先声明taglib<br>&lt;%@taglib prefix=”s” uri=”/struts-tags”%&gt;<br>&lt;\s:property value=”name”/&gt;</p>
<p>同样也支持Velocity语法、FreeMarker语法</p>
<p>其他标签不在赘述….</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[struts2详解之OGNL和类型转换]]></title>
      <url>http://yoursite.com/2016/09/08/12.html</url>
      <content type="html"><![CDATA[<p>OGNL是什么？（对象图导航语言）<br><a id="more"></a><br>像是基于字符串的HTTP输入/输出与java的内部处理的粘合剂。</p>
<p>内建的类型转换器<br>1、立即可用的类型转换器<br>String/String<br>boolean/Boolean<br>char/charactor<br>int/Integer、float/Float、double/Double<br>Date<br>array<br>List默认情况下使用String填充<br>Map默认情况下使用String填充</p>
<p>自定义类型转换器：<br>继承StrutsTypeConverter<br>还需要配置….</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[struts2详解之拦截器]]></title>
      <url>http://yoursite.com/2016/09/08/11.html</url>
      <content type="html"><![CDATA[<p>拦截器完成各种任务时，我们称之为横切、预处理、后加工。<br>比如，日志记录就是一个横切关注点。他不跟模型层交互，他不是某个动作所特有，他横向关联所有的动作。<br><a id="more"></a></p>
<p>框架不直接调用动作的execute()方法，而是创建一个ActionInvocation的对象，他封装了动作和一系列被配置在动作执行之前和之后的拦截器。<br>ActionInvocation<br>——————————————————————————————————————————————————————&gt;Action<br>                                                         |<br>exception-&gt;modeldriven-&gt;fileUpload-&gt;params-&gt;workFolw     |<br>                                                         v<br>&lt;——————————————————————————————————————————————————————result</p>
<p>拦截器强大的功能之一就是改变工作流。</p>
<p>拦截器工作原理：<br>总指挥：ActionInvocation指挥着动作的完整执行，以及与之相关的拦截器栈的顺序触发。</p>
<p>拦截器栈是递归调用的，因为在第一次调用ActionInvocation的invoke()方法，ActionInvocation通过拦截器的intercept()方法把控制转交给拦截器栈里的第一个拦截器，重要的是，intercept()方法把ActionInvocation实例作为一个参数。</p>
<p>拦截器触发时：<br>1、做一些预处理<br>2、通过调用invoke()方法把控制转交给下一个拦截器，最后直到动作，或者通过返回一个控制字符串中断执行。<br>3、做一些后加工。</p>
<p>default包里的一个TimerInterceptor的intecept()方法：<br>public String intercept(ActionInvocation invocation)throws Exception{<br>    long startTime=System.currentTimeMillis(); //预处理<br>    String result=invocation.invoke();//invoke()方法<br>    long executeTime=System.currentTimeMills()-startTime;//后加工<br>    ….<br>    return result;//让递归返回拦截器栈<br>}<br>调用invoke()方法后，等待这个方法的返回结果。</p>
<p>工作流拦截器：<br>workflow拦截器使用params调整拦截器的执行<br>可以使用以下几个参数：<br>alwaysInvokeValidate(true或者false，默认true，意思是validate()方法将会被调用)<br>inputResultName(验证失败时选择结果的名字，默认是Action.INPUT)<br>excludeMethods(workflow拦截器不应该执行的方法名，可以省略动作的某一个方法的验证检查)</p>
<p><interceptor-ref name="workflow"><br>    <param name="excludeMethods">input,back,cancel,browse<br></interceptor-ref></p>
<p>自定义拦截器：<br>1、实现Interceptor接口<br>2、声明拦截器并构建新的默认栈</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[struts2详解之Action]]></title>
      <url>http://yoursite.com/2016/09/08/10.html</url>
      <content type="html"><![CDATA[<p>Action动作包含了业务逻辑、承载数据、选择返回的结果<br>是框架的核心。<br><a id="more"></a><br>1、封装了业务逻辑单元<br>使用execute()方法来实现这个功能<br>public String execute(){<br>    //业务逻辑调用<br>    return “SUCCESS”;<br>}<br>这个方法只关注与请求有关的业务逻辑。<br>复杂的业务逻辑卡哇伊封装成一个业务组件，利用依赖注入把组件注入到动作里，可以通过Spring集成注入组件的技术。</p>
<p>2、为数据传输提供场所(三种方式)<br>一、把承载的数据实现为java bean属性(其实就是通过getter,setter方法操作属性)<br>在action里<br>private String name;<br>getName();<br>setName();<br>二、使用对象支持的属性。<br>三、使用模型驱动公开数据</p>
<p>public class LoginAction extends ActionSupport implements ModelDriven{<br>    private User user=new User();<br>    …<br>   //复写getModel()方法<br>    public Object getModel(){<br>    return user;<br>    }<br>}</p>
<p>注意：模型驱动的动作在execute()方法在调用的时候，框架已经获得了对象模型的引用，请求的过程当中会一直使用他，如果动作内部改变了模型字段，可能会导致一些数据不一致的问题。<br>3、动作为结果路由选择返回控制字符串</p>
<action name="login"><br>    <result name="success"><br>        /success.jsp<br>    </result><br>    <result name="error"><br>        /error.jsp<br>    </result><br></action>

<p>SUCCESS就是一个结果组件的名字。</p>
<p>structs2的包属性：<br>Name：包的名字<br>namespace:包内所有动作的命名空间 映射的URL就必须带上命名空间来访问<br>extends:被继承的父包  这对默认组件的使用起到很大的作用。extends structs-default<br>（！省略了继承等于拒绝了框架的核心功能!）</p>
<p>实现动作（Action接口）<br>ActionSupport类提供了Action接口和其他几个有用接口的默认实现类.</p>
<p>基于拦截器的文件上传<br>首先要在配置文件里追加到默认拦截器栈</p>
<p><interceptor-ref name="fileUpload">要定义在param之前</interceptor-ref></p>
<interceptor-ref name="param">

<p>fileUpload拦截器提供的请求参数：<br>File—-&gt;被上传的文件<br>ContentType    String—&gt;文件的内容类型<br>FileName       String—&gt;存储在服务器上的上传文件名</p>
<p>前端：<br><s:form action="upload" method="post" enctype="multipart/form-data"><br><s:file name="file" label="上传文件"><br><s:submit><br></s:submit></s:file></s:form><br>后台：<br>java bean 封装文件的参数：</p>
<hr>
<p>private File file;<br>private String contentType;<br>private String fileName;</p>
<hr>
<p>多个文件的话就是File[]、String[]、String[]</p>
</interceptor-ref>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[struts2详解之声明式架构（两种配置）]]></title>
      <url>http://yoursite.com/2016/09/08/9.html</url>
      <content type="html"><![CDATA[<p>一是xml文件</p>
<p><br><action name="login"><br>    <result name="success"><br>        /success.jsp<br>    </result><br>    <result name="error"><br>        /error.jsp<br>    </result><br></action><br></p>

<p>这个文件驻留在classpath路径下<br><a id="more"></a><br>二是注解方式<br>@Results({<br>@Result(name=”success”,value=”/success.jsp”),<br>@result(name=”error” ,value=”/error/jsp”)<br>})<br>public class Login{<br>    …<br>}</p>
<p>默认是.action结尾。</p>
<p>约定大于配置的展望^_^</p>
<p>有一些不需要开发人员声明的默认组件的配置，在structs-defauult.xml文件里。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[struts2详解之原理模式]]></title>
      <url>http://yoursite.com/2016/09/05/8.html</url>
      <content type="html"><![CDATA[<p>服务架构图：</p>
<pre><code>Struts2（具体实现）
    ^
    |
java servlet规范
    ^
    |
底层Http(基于底层)
</code></pre><a id="more"></a>
<p>java servlet api解决了底层/服务器问题，但没有提供应用程序级别的问题，比如说<br>1、请求参数到java数据类型的绑定（从请求中拿出的都是字符串类型，但需要转化成java的数据类型，很费时、麻烦）<br>2、访问层的业务逻辑（形成一个一致的工作流，面向动作的框架Action）<br>3、访问数据层<br>4、表示层（视图复杂的javascript，国际化的呈现视图、有太多的可复用代码）<br>5、国际化和本地化的支持</p>
<p>MVC模式有三个关注点：模型、视图、控制器<br>在Structs2当中通过action、result、FilterDispatcher来实现。</p>
<p>工作流： web客户端   ^<br>            |         \<br>      请求  |          \<br>            |           \<br>            v            \    返回视图<br>        控制器<br>            |             \<br> 调用动作   |              \<br>            v               \<br>        模型————-&gt; 视图<br>                选择结果</p>
<p>控制器：FilterDispatcher就是一个servlet过滤器，拦截所有的请求，根据配置文件里的URL映射决定哪个动作处理这个请求，可以通过xml或者注解的方式来完成。</p>
<p>动作：Action主要有两个作用，一是封装了业务逻辑的调用（组合的方式），二是用于数据传输。</p>
<p>视图（结果）:Result视图就是用户看见的，通常是jsp页面、模版技术呈现的视图等。</p>
<p>structs2工作原理：<br>框架不仅包含了MVC组件，可以说在其他参与请求处理的组件（拦截器、OGNL、ValuStack值栈）的帮助下，提供了更为整洁的MVC实现。<br><a href="http://i7.qhmsg.com/t017741e98dd9ffd37b.jpg" target="_bank">原理图</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Myabtis 3.4.1源码分析之代码结构]]></title>
      <url>http://yoursite.com/2016/09/05/7.html</url>
      <content type="html"><![CDATA[<p>准备：<br>1、下载好源码<a href="https://github.com/mybatis/mybatis-3/archive/mybatis-3.4.1.tar.gz" target="_blank" rel="external">Source code (zip)</a><br>2、将源码导入Eclipse当中<br><a id="more"></a><br>开始：<br>先来看下项目的目录结构<br>ibatis<br>             ├─annotations<br>             ├─binding<br>             ├─builder<br>             │  ├─annotation<br>             │  └─xml<br>             ├─cache<br>             │  ├─decorators<br>             │  └─impl<br>             ├─cursor<br>             │  └─defaults<br>             ├─datasource<br>             │  ├─jndi<br>             │  ├─pooled<br>             │  └─unpooled<br>             ├─exceptions<br>             ├─executor<br>             │  ├─keygen<br>             │  ├─loader<br>             │  │  ├─cglib<br>             │  │  └─javassis<br>             │  ├─parameter<br>             │  ├─result<br>             │  ├─resultset<br>             │  └─statement<br>             ├─io<br>             ├─jdbc<br>             ├─logging<br>             │  ├─commons<br>             │  ├─jdbc<br>             │  ├─jdk14<br>             │  ├─log4j<br>             │  ├─log4j2<br>             │  ├─nologging<br>             │  ├─slf4j<br>             │  └─stdout<br>             ├─mapping<br>             ├─parsing<br>             ├─plugin<br>             ├─reflection<br>             │  ├─factory<br>             │  ├─invoker<br>             │  ├─property<br>             │  └─wrapper<br>             ├─scripting<br>             │  ├─defaults<br>             │  └─xmltags<br>             ├─session<br>             │  └─defaults<br>             ├─transaction<br>             │  ├─jdbc<br>             │  └─managed<br>             └─type</p>
<p>pom.xml当中的依赖：<br> <dependencies><br>    <dependency><br>      <groupid>ognl</groupid><br>      <artifactid>ognl</artifactid><br>      <version>3.1.8</version><br>      <scope>compile</scope><br>      <optional>true</optional><br>    </dependency><br>    <dependency><br>      <groupid>org.javassist</groupid><br>      <artifactid>javassist</artifactid><br>      <version>3.20.0-GA</version><br>      <scope>compile</scope><br>      <optional>true</optional><br>    </dependency><br>    <dependency><br>      <groupid>org.slf4j</groupid><br>      <artifactid>slf4j-api</artifactid><br>      <version>1.7.21</version><br>      <optional>true</optional><br>    </dependency><br>    <dependency><br>      <groupid>org.slf4j</groupid><br>      <artifactid>slf4j-log4j12</artifactid><br>      <version>1.7.21</version><br>      <optional>true</optional><br>    </dependency><br>    <dependency><br>      <groupid>log4j</groupid><br>      <artifactid>log4j</artifactid><br>      <version>1.2.17</version><br>      <optional>true</optional><br>    </dependency><br>    <!-- Don't upgrade to 2.4+ until mybatis switches to java 7 --><br>    <dependency><br>      <groupid>org.apache.logging.log4j</groupid><br>      <artifactid>log4j-core</artifactid><br>      <version>2.3</version><br>      <optional>true</optional><br>    </dependency><br>    <dependency><br>      <groupid>commons-logging</groupid><br>      <artifactid>commons-logging</artifactid><br>      <version>1.2</version><br>      <optional>true</optional><br>    </dependency><br>    <dependency><br>      <groupid>cglib</groupid><br>      <artifactid>cglib</artifactid><br>      <version>3.2.2</version><br>      <optional>true</optional><br>    </dependency></dependencies></p>
<pre><code>&lt;!-- Test dependencies --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;junit&lt;/groupId&gt;
  &lt;artifactId&gt;junit&lt;/artifactId&gt;
  &lt;version&gt;4.12&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.hsqldb&lt;/groupId&gt;
  &lt;artifactId&gt;hsqldb&lt;/artifactId&gt;
  &lt;version&gt;2.3.4&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.derby&lt;/groupId&gt;
  &lt;artifactId&gt;derby&lt;/artifactId&gt;
  &lt;version&gt;10.12.1.1&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.mockito&lt;/groupId&gt;
  &lt;artifactId&gt;mockito-core&lt;/artifactId&gt;
  &lt;version&gt;1.10.19&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;!-- Do not go to 2.x until we are on jdk7 --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;
  &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;
  &lt;version&gt;1.4&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.jboss.spec.javax.transaction&lt;/groupId&gt;
  &lt;artifactId&gt;jboss-transaction-api_1.2_spec&lt;/artifactId&gt;
  &lt;version&gt;1.0.1.Final&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;
  &lt;artifactId&gt;velocity&lt;/artifactId&gt;
  &lt;version&gt;1.7&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;!-- postgresql driver is required to run the refcursor tests --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;postgresql&lt;/groupId&gt;
  &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
  &lt;version&gt;9.1-901-1.jdbc4&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre><p>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Myabtis 3.4.1源码分析之总体流程]]></title>
      <url>http://yoursite.com/2016/09/05/6.html</url>
      <content type="html"><![CDATA[<p>前言：MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p>
<p>总体流程</p>
<p>(1)加载配置并初始化</p>
<p>触发条件:加载配置文件</p>
<p>将SQL的配置信息加载成为一个个MappedStatement对象(包括了传入参数映射配置、执行的SQL语句、结果映射配置)，存储在内存中。<br><a id="more"></a><br>(2)接收调用请求</p>
<p>触发条件:调用Mybatis提供的API</p>
<p>传入参数:为SQL的ID和传入参数对象</p>
<p>处理过程:将请求传递给下层的请求处理层进行处理。</p>
<p>(3)处理操作请求 触发条件:API接口层传递请求过来</p>
<p>传入参数:为SQL的ID和传入参数对象</p>
<p>处理过程:</p>
<p>(A)根据SQL的ID查找对应的MappedStatement对象。</p>
<p>(B)根据传入参数对象解析MappedStatement对象，得到最终要执行的SQL和执行传入参数。</p>
<p>(C)获取数据库连接，根据得到的最终SQL语句和执行传入参数到数据库执行，并得到执行结果。</p>
<p>(D)根据MappedStatement对象中的结果映射配置对得到的执行结果进行转换处理，并得到最终的处理结果。</p>
<p>(E)释放连接资源。</p>
<p>(4)返回处理结果将最终的处理结果返回。</p>
<p>来源:<a href="http://baike.so.com/doc/5582692-5795562.html" target="_blank">Mybatis360百科</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于webservice框架cxf遇到的一些问题]]></title>
      <url>http://yoursite.com/2016/09/01/2.html</url>
      <content type="html"><![CDATA[<p>关于webservice框架cxf遇到的一些问题</p>
<p>代码贴上：<br>import org.apache.cxf.jaxws.JaxWsServerFactoryBean;</p>
<p>import com.java1234.service.HelloWorld;<br>import com.java1234.service.impl.HelloWorldImpl;<br><a id="more"></a><br>public class Server {</p>
<pre><code>public static void main(String[] args) {
    System.out.println(&quot;webservice start!&quot;);
    HelloWorld helloWorldImpl = new HelloWorldImpl();
    String address = &quot;http://192.168.0.101/hello?wsdl&quot;;
    // Endpoint.publish(address, helloWorldImpl);
    JaxWsServerFactoryBean factoryBean = new JaxWsServerFactoryBean();
    factoryBean.setAddress(address);
    factoryBean.setServiceClass(HelloWorld.class);
    factoryBean.setServiceBean(helloWorldImpl);
    factoryBean.create();
    System.out.println(&quot;webservice started!&quot;);
}
</code></pre><p>}</p>
<p>警告: Interceptor for {<a href="http://impl.service.test.com/}TestService" target="_blank" rel="external">http://impl.service.test.com/}TestService</a> has thrown exception, unwinding now<br>org.apache.cxf.interceptor.Fault: No binding operation info while invoking unknown method with params unknown.</p>
<p>解决方式:<br>将访问地址修改为<a href="http://localhost:8080/cxf/TestService?wsdl即可加入了?wsdl" target="_blank" rel="external">http://localhost:8080/cxf/TestService?wsdl即可加入了?wsdl</a></p>
<p>警告: Interceptor for {<a href="http://impl.service.test.com/}TestService" target="_blank" rel="external">http://impl.service.test.com/}TestService</a> has thrown exception, unwinding now<br>org.apache.cxf.binding.soap.SoapFault: A SOAP 1.2 message is not valid when sent to a SOAP 1.1 only endpoint.</p>
<p>原因是soap协议不匹配，要使用soap1.2协议<br>在接口或实现类上声明，注意要引入geronimo-jaxws_2.2_spec-1.0.jar包<br>@BindingType(value = “<a href="http://www.w3.org/2003/05/soap/bindings/HTTP/" target="_blank" rel="external">http://www.w3.org/2003/05/soap/bindings/HTTP/</a>“) 或<br>@BindingType(value = SOAPBinding.SOAP12HTTP_BINDING)</p>
<p>cxf 做webservice客户端使用soap1.2协议</p>
<jaxws:client id="cdsPatientServices" address="http://localhost:8181/cxf/v1/soap/patient" bindingid="http://www.w3.org/2003/05/soap/bindings/HTTP/" serviceclass="net.carefx.cds.v1.service.patientservices.CdsPatientServices">
</jaxws:client>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Genymotion代替原生模拟器]]></title>
      <url>http://yoursite.com/2016/08/25/5.html</url>
      <content type="html"><![CDATA[<p>用过Eclipse开发的Android工程师都知道原生的模拟器非常NB啊，每次出场就跟古代的大姑娘上轿一样，要先打扮好，然后迈着三寸金莲慢慢悠悠出来，实在受不了了，所以干脆找个可替代的产品吧，想起前阵子在微博上看到的Genymotion，于是今天就直接用上了，果断速度杠杠滴啊，写android的小伙伴们可以果断走起了，注意：mac下写android的小伙伴要耐心点儿，如果你升级了10.9的话，会有意想不到的兼容性问题发生，本人血的教训已经可以足够作为证明了。<br>准备工作<br>首先到Genymotion官网上注册一个账号，传送门在此，注意，该账号并非只用于下载所需程序，还会在你新建不同的Devices时要用到，所以要记牢。注册完账号之后，登录，然后就可以直接到下载页面（下载传送门在此）去下载你所需要的东西了，基本上我们需要如下的几个程序或者插件：<br>VirtualBox(win系统下Genymotion官方有Genymotion Installer With VirtualBox版本的，可直接下载，mac osx或者Linux系统需要单独安装VirtualBox)<br>Genymotion Installer<br><a id="more"></a><br>当然，还需要额外的Eclipse或者IntelliJ IDEA的插件，这个可以下载完再安装，也可以直接在线安装。<br>准备就绪之后就开始一路next安装完Genymotion Installer，然后打开Genymotion程序，如下图：<br>[图片]</p>
<p>点击Settings，指定下你的android的SDK位置，我自己的电脑上安装了Android Studio和Eclipse，所以这里通用了同一个SDK，如下图：<br>[图片]</p>
<p>完成了之后，接下来，我们还要在Eclipse中安装相对应的插件：<br>点击Help-&gt;Install New Software, 输入如下网址，<a href="http://plugins.genymotion.com/eclipse，然后安装即可。" target="_blank" rel="external">http://plugins.genymotion.com/eclipse，然后安装即可。</a><br>然后我们就会发现在Eclipse中多了这么一个按钮，这个就是Genymotion的Virtual Device Manager按钮<br>[图片]</p>
<p>接下来，我们打开安装好的Genymotion的程序，点击add，添加一个设备，会弹出提示需要登录，输入文章开始的时候我们创建的账号和密码，然后在列表中选择我们要添加的设备信息，点击右下角的Add按钮即可添加一个设备。<br>需要注意的一点就是，Genymotion模拟器访问网络和原生的Android模拟器是不一样的，因为Genymotion模拟器是运行在VirtualBox虚拟机上的x86架构的Android版本（这也是它的开机速度远胜于原生模拟器的原因吧），所以如果你的应用需要联网的话，那么你需要查看一下你的VirtualBox的虚拟网卡了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分治算法]]></title>
      <url>http://yoursite.com/2016/08/25/4.html</url>
      <content type="html"><![CDATA[<p>算法描述：<br>使用分治算法设计程序，一般按以下步骤进行：<br>（1）分解：将要求解的问题划分成若干规模较小的同类问题<br>（2）求解：当子问题划分的足够小时，用较简单的方法解决<br>（3）合并：按求解的问题要求，将子问题的解逐层合并，即可构成问题的最终解答</p>
<p>比赛赛程安排：<br> 四名选手，三天可以比完<br>选手\时间第一天第二天第三天1234214334124321<br><a id="more"></a><br>划分两个选手 ，一天就可以比完<br>选手\时间第一天1221</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scala简介]]></title>
      <url>http://yoursite.com/2016/08/25/1.html</url>
      <content type="html"><![CDATA[<p>Scala语言，函数式编程语言。</p>
<p>一、安装Scala语言<br>    前往scala官网下载对应的系统版本，我的是windows7 64位系统<br>    下载好scala-2.11.8.msi,直接点击安装。<br>    一路下去Next…<br>二、基础语法<br>    值引用透明，完美的分布式编程语言。</p>
<a id="more"></a>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JIT编译器(虚拟机)]]></title>
      <url>http://yoursite.com/2016/08/21/3.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>JIT编译器，英文写作Just-In-Time Compiler，中文意思是即时编译器.</p>
</blockquote>
<p>在Java编程语言和环境中，即时编译器(JIT compiler，just-in-time compiler)是一个把Java的字节码(包括需要被解释的指令的程序)转换成可以直接发送给处理器的指令的程序。当你写好一个Java程序后，源语言的语句将由Java编译器编译成字节码，而不是编译成与某个特定的处理器硬件平台对应的指令代码(比如，Intel的Pentium微处理器或IBM的System/390处理器)。字节码是可以发送给任何平台并且能在那个平台上运行的独立于平台的代码。<br><a id="more"></a></p>
<blockquote>
<p>事实上，JIT编译器分成两种:经济编译器和普通编译器。</p>
</blockquote>
<p>折叠 经济JIT编译器<br>经济JIT编译器代表了运行一个.NET应用程序所需要的最少功能，它直接用对等的本机代码取代每一条MSIL指令，不进行任何优化从而也带来更少的系统负载。这也意味着它主要应用在内存等资源比较紧张的平台上。<br>折叠 普通JIT编译器<br>普通JIT编译器则是缺省的运行时配置，它会对其产生的代码进行即时优化。这样做无形中给予了.NET超出传统预编译语言的一个优点:预编译语言只能对其处理的代码将要运行于其上的平台做一番大致的事前估计。<br>JIT编译器可以经过准确调节达到当前运行时状态，结果可以完成一些预编译语言无法完成的工作:更高效地利用和分配CPU寄存器。在适当的情况下实施低级代码优化，比如常量重叠、拷贝复制、取消范围检查、取消常规副表达式以及方法内联等</p>
<p>在代码执行期间监控当前的物理和虚拟内存需求从而更高效地利用内存<br>产生特定的平台指令以准确、充分地利用实际的处理器模式<br>NET编译的结果就是JIT所带来的额外负载要求并没有产生显著的性能损失。<br>折叠 Java中的JIT</p>
<blockquote>
<p>JIT Compiler(Just-in-time Compiler) 即时编译</p>
</blockquote>
<p>最早的Java建置方案是由一套转译程式(interpreter)，将每个Java指令都转译成对等的微处理器指令，并根据转译后的指令先后次序依序执行，由于一个Java指令可能被转译成十几或数十几个对等的微处理器指令，这种模式执行的速度相当缓慢。 针对这个问题，业界首先开发出JIT(just in time)编译器。当Java执行runtime环境时，每遇到一个新的类别(class:类别是Java程式中的功能群组)，类别是Java程式中的功能群组-JIT编译器在此时就会针对这个类别进行编译(compile)作业。经过编译后的程式，被优化成相当精简的原生型指令码(native code)，这种程式的执行速度相当快。花费少许的编译时间来节省稍后相当长的执行时间，JIT这种设计的确增加不少效率，但是它并未达到最顶尖的效能，因为某些极少执行到的Java指令在编译时所额外花费的时间可能比转译器在执行时的时间还长，针对这些指令而言，整体花费的时间并没有减少。 基于对JIT的经验，业界发展出动态编译器(dynamic compiler)，动态编译器仅针对较常被执行的程式码进行编译，其余部分仍使用转译程式来执行。也就是说，动态编译器会研判是否要编译每个类别。动态编译器拥有两项利器:一是转译器，另一则是JIT，它透过智慧机制针对每个类别进行分析，然后决定使用这两种利器的哪一种来达到最佳化的效果。动态编译器针对程式的特性或者是让程式执行几个循环，再根据结果决定是否编译这段程式码。这个决定不见得绝对正确，但从统计数字来看，这个判断的机制正确的机会相当高。事实上，动态编译器会根据「历史资料」做决策，所以程式执行的时间愈长，判断正确的机率就愈高。以整个结果来看，动态编译器产生的程式码执行的速度超越以前的JIT技术，平均速度可提高至50%。</p>
<blockquote>
<p>JIT 页面渲染引擎</p>
</blockquote>
<p>JIT 页面渲染是 COMSHARP CMS 为了实现网站内容即时更新而开发的页面生成技术，JIT页面渲染引擎直接从数据库获取网站最新内容，瞬间生成页面输出给访问者，并通过 URL 转写技术实现纯静态地址。JIT 页面渲染技术是针对传统 CMS 生成静态 HTML 文件而言。传统 CMS 由于使用脚本代码模板技术，页面生成前，需要将数据库中的页面内容用外部模板进行解析与渲染，导致严重的性能问题，为了解决这个问题，传统 CMS 一般采用生成 HTML 静态文件技术，即，在内容创作完成后，对全站的内容执行一个静态 HTML 文件生成过程，最终，全站内容以静态 HTML 文件的形式存在。 静态 HTML 文件技术最显著的优势是性能出众，然而这种技术最严重的问题在于，用户对站点任何修改与更新，必须首先经过一次全站 HTML 文件重新生成过程，然后才能被访问者看到。根据不同 CMS 产品的性能和站点规模，这个 HTML 生成过程可能长到十几分钟到几十分钟或更长。也有个别 CMS 产品使用触发式页面渲染模式，即内容更新后，并不立即生成 HTML 文件，而是在用户第一次访问该页面时，触发生成该页面的 HTML 文件，这种技术的问题在于，用户第一次访问被更新页面的时候，可能经历非常漫长的等待，因为站点内各个页面之间并非孤立的，他们可能相互引用，虽然访问的只是一个页面，为了对引用页面同步更新，需要重新生成 HTML 文件的页面可能有多个。 JIT 页面渲染如何工作? 下图，是 COMSHARP CMS JIT 渲染引擎与传统 CMS 生成 HTML 静态页面模式对比。可以看出，JIT 渲染引擎直接将网站最新内容从数据库渲染给访问用户，而传统 CMS 的站点内容在到达访问用户之前，首先要经历一个 HTML 的转换过程。COMSHARP CMS JIT 页面渲染如何实现毫秒级的渲染速度? COMSHARP CMS 在页面渲染的时候，JIT 引擎可以在数十毫秒的时间内容完整整个页面的生成，这样就保证用户访问的时候，不会因 JIT 渲染造成延迟。事实上，COMSHARP CMS 网站访问速度只取决于服务器带宽，页面生成过程带来的延迟可以忽略不计。 我们有两项技术保证这样的性能: 编译级主题模板 COMSHARP CMS 的编译级主题模板直接内嵌在系统的 DLL 中，主题模板的套用是在运行时(Run Time)完成，这和传统 CMS 的调用脚本代码模板解释运行是截然不同。</p>
]]></content>
    </entry>
    
  
  
</search>
